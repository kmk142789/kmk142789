"""Tests for :mod:`tools.hex_ascii_decoder`."""
import pytest

from tools.hex_ascii_decoder import decode_hex_lines


def test_decode_zero_padded_sequence():
    lines = [
        "000000000000000000000000000000000000000000000000000000000000002e",
        "000000000000000000000000000000000000000000000000000000000000002f",
        "0000000000000000000000000000000000000000000000000000000000000030",
        "0000000000000000000000000000000000000000000000000000000000000031",
        "0000000000000000000000000000000000000000000000000000000000000032",
        "0000000000000000000000000000000000000000000000000000000000000033",
        "0000000000000000000000000000000000000000000000000000000000000034",
        "0000000000000000000000000000000000000000000000000000000000000035",
        "0000000000000000000000000000000000000000000000000000000000000036",
        "0000000000000000000000000000000000000000000000000000000000000037",
        "0000000000000000000000000000000000000000000000000000000000000038",
        "0000000000000000000000000000000000000000000000000000000000000039",
        "000000000000000000000000000000000000000000000000000000000000003a",
        "000000000000000000000000000000000000000000000000000000000000003b",
        "000000000000000000000000000000000000000000000000000000000000003c",
        "000000000000000000000000000000000000000000000000000000000000003d",
        "000000000000000000000000000000000000000000000000000000000000003e",
        "000000000000000000000000000000000000000000000000000000000000003f",
        "0000000000000000000000000000000000000000000000000000000000000040",
        "0000000000000000000000000000000000000000000000000000000000000041",
        "0000000000000000000000000000000000000000000000000000000000000042",
        "0000000000000000000000000000000000000000000000000000000000000043",
        "0000000000000000000000000000000000000000000000000000000000000044",
        "0000000000000000000000000000000000000000000000000000000000000045",
        "0000000000000000000000000000000000000000000000000000000000000046",
        "0000000000000000000000000000000000000000000000000000000000000047",
        "0000000000000000000000000000000000000000000000000000000000000048",
        "0000000000000000000000000000000000000000000000000000000000000049",
        "000000000000000000000000000000000000000000000000000000000000004a",
        "000000000000000000000000000000000000000000000000000000000000004b",
        "000000000000000000000000000000000000000000000000000000000000004c",
        "000000000000000000000000000000000000000000000000000000000000004d",
        "000000000000000000000000000000000000000000000000000000000000004e",
        "000000000000000000000000000000000000000000000000000000000000004f",
        "0000000000000000000000000000000000000000000000000000000000000050",
        "0000000000000000000000000000000000000000000000000000000000000051",
        "0000000000000000000000000000000000000000000000000000000000000052",
        "0000000000000000000000000000000000000000000000000000000000000053",
        "0000000000000000000000000000000000000000000000000000000000000054",
        "0000000000000000000000000000000000000000000000000000000000000055",
        "0000000000000000000000000000000000000000000000000000000000000056",
        "0000000000000000000000000000000000000000000000000000000000000057",
        "0000000000000000000000000000000000000000000000000000000000000058",
        "0000000000000000000000000000000000000000000000000000000000000059",
        "000000000000000000000000000000000000000000000000000000000000005a",
    ]

    result = decode_hex_lines(lines)

    assert result == "./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"


def test_rejects_non_printable_byte():
    with pytest.raises(ValueError, match="non-printable"):
        decode_hex_lines(["07"])


def test_allowing_non_printable_bytes():
    result = decode_hex_lines(["07", "41"], allow_non_printable=True)

    # ``\x07`` is kept when the flag is enabled.
    assert result == "\x07A"
