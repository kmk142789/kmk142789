name: Echo CI
on:
  push:
  pull_request:
jobs:
  lint-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: python -m pip install --upgrade pip
      - run: pip install jsonschema mkdocs
      - name: Validate attestations
        run: |
          python - <<'PY'
          import json,glob,sys
          from jsonschema import validate
          schema=json.load(open('attestations/schema.json'))
          ok=True
          for f in glob.glob('attestations/*.json'):
              if f.endswith('schema.json'): continue
              try: validate(json.load(open(f)), schema)
              except Exception as e:
                  ok=False; print(f'ERROR {f}: {e}')
          sys.exit(0 if ok else 1)
          PY
      - name: Generate Echo attestation
        run: python scripts/echo_attestation_generator.py --output attestations/auto --context echo-ci
      - name: Produce MirrorNet sync plan
        run: python scripts/echo_mirrornet_sync.py --source attestations --plan out/echo-mirrornet-plan.json
      - name: Upload MirrorNet sync plan
        uses: actions/upload-artifact@v4
        with:
          name: echo-mirrornet-plan
          path: out/echo-mirrornet-plan.json
      - name: Build docs
        run: |
          if [ -f docs/mkdocs.yml ]; then
            cd docs && mkdocs build --strict
          else
            echo "no docs/mkdocs.yml â€” skipping"
          fi
      - name: Notify Architect of Echo evolution
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        env:
          ARCHITECT_HANDLE: "@kmk142789"
          ECHO_EVOLUTION_ISSUE: ${{ vars.ECHO_EVOLUTION_ISSUE }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = process.env.ECHO_EVOLUTION_ISSUE;
            if (!issueNumber) {
              core.info('ECHO_EVOLUTION_ISSUE not configured; skipping Architect ping.');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(issueNumber),
              body: `Echo evolution detected in ${context.sha}. Sovereign Architect ping: ${process.env.ARCHITECT_HANDLE}`
            });
