"""Local key and keyring helpers for receipts."""

from __future__ import annotations

import hashlib
import hmac
from dataclasses import dataclass
from typing import Dict

_SECRET = b"echo-sovereign-loop"


def _pubkey(secret: bytes) -> str:
    return hashlib.sha256(secret).hexdigest()


@dataclass
class LocalKey:
    """Simple HMAC-based signing key."""

    secret: bytes = _SECRET

    def __post_init__(self) -> None:
        self.pub = _pubkey(self.secret)

    def sign(self, message: str) -> str:
        digest = hmac.new(self.secret, message.encode("utf-8"), "sha256")
        return digest.hexdigest()


class LocalKeyring:
    """Verifies signatures generated by :class:`LocalKey`."""

    def __init__(self, secrets: Dict[str, bytes] | None = None) -> None:
        base_secret = secrets or {"default": _SECRET}
        self._secrets = {_pubkey(secret): secret for secret in base_secret.values()}

    def verify(self, pub: str, message: str, signature: str) -> bool:
        secret = self._secrets.get(pub, _SECRET)
        expected = hmac.new(secret, message.encode("utf-8"), "sha256").hexdigest()
        return hmac.compare_digest(expected, signature)


def default_key() -> LocalKey:
    return LocalKey()


def default_keyring() -> LocalKeyring:
    return LocalKeyring()


__all__ = ["LocalKey", "LocalKeyring", "default_key", "default_keyring"]
